@Component is a decorator function that specifies the Angular metadata for the component.

To generate the new component names demo
>>ng generate component demo


Selector :
matches the name of the HTML element that identifies this component within a parent component's template.

Router : for using router in angular application as router is not a part of core angular application.
import { RouterModule, Routes } from '@angular/router';

Constructors:

Constructors should not do complex tasks as this will affect on the performane of the system
Constructors should do no more than set the initial local variables to simple values.

ngOnInit():The ngOnInit() is a lifecycle hook. Angular calls ngOnInit() shortly after creating a component. 
It's a good place to put initialization logic.
Use ngOnInit() for two main reasons:

To perform complex initializations shortly after construction.
To set up the component after Angular sets the input properties.

An ngOnInit() is a good place for a component to fetch its initial data.

call ngOnInit() as soon as component is created as it does initialization.
ngOnInit() runs only once.

Pipes are a good way to format strings, currency amounts, dates and other display data. 
Angular ships with several built-in pipes and you can create your own.
Usage : {{title | uppercase}}

*ngFor is angular directive to list out the repetitive content,
It repeats the host element for eg. In below example li is the host element.
works like iterator

<li *ngFor = "let todo of todos"></li> where todos is an array.

(Event Binding):

(click) = "method-to-extcute(arg)"

is the syntax for binding the function on happening of that event.

*ngIf : works like if condition. (used if the element is present then display otherwise remove it from DOM)

to conditionally include or exclude a block of HTML.

for eg.

*ngIf is used in heroes app to remove the selectedHero name as at first
it is void, so ngIf removes selectedHero.name and id property from DOM.
and when that properties are assigned then it adds those in the DOM again.


[class.selected] = "some-condition"
another useful class binding method which is used to assign the class only after matching the condition.

@Input Decorator


